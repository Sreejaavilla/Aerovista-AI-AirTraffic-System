# AEROVISTA — GitHub-ready monorepo (preview)

> This canvas contains a full, GitHub-ready demo layout for the hackathon: a React frontend (Three.js), a Flask backend (Flask-SocketIO) and demo AI logic. Below are the file blocks — copy them into files in your local repo.

---

```text
README.md
```

```markdown
# AEROVISTA — Cognitive Air Traffic Harmony System (Hackathon Demo)

This repository contains a lightweight, GitHub-ready demo of **AEROVISTA**, an AI-assisted air traffic coordination prototype with:

- React frontend (holographic-like 3D airspace using Three.js)
- Flask backend with simple AI prediction endpoints and Flask-SocketIO for real-time events
- Simulated AI logic for staffing optimization & punctuality predictions
- Instructions to run locally for a hackathon demo

## What’s included

- `frontend/` — React app (Three.js canvas, staff & alert panels, socket.io client)
- `backend/` — Flask app providing REST endpoints and Socket.IO events

## Quickstart (local)

Prereqs: Node.js (18+), Python 3.10+, pip

1. Start backend:

```bash
cd backend
python -m venv venv
source venv/bin/activate   # or venv/Scripts/activate on Windows
pip install -r requirements.txt
python app.py
```

The backend runs on http://localhost:5000 and Socket.IO at the same origin.

2. Start frontend:

```bash
cd frontend
npm install
npm start
```

Open http://localhost:3000 — you’ll see a 3D airspace, simulated flights, AI alerts and staffing meter.

---
```

```text
backend/requirements.txt
```

```text
flask
flask-socketio
eventlet
numpy
pandas
scikit-learn
python-dotenv
```

```text
backend/app.py
```

```python
from flask import Flask, jsonify
from flask_socketio import SocketIO, emit
from threading import Event
import random
import numpy as np

app = Flask(__name__)
app.config['SECRET_KEY'] = 'aerovista-demo-secret'
socketio = SocketIO(app, cors_allowed_origins='*', async_mode='eventlet')

stop_event = Event()

# Simple simulated AI: predicts congestion score (0-100) and suggests staffing adjustments

def generate_prediction():
    base = 40
    while not stop_event.is_set():
        weather_factor = random.choice([0, 5, -5, 10, -10])
        traffic_spike = np.random.poisson(1)
        congestion = max(0, min(100, base + weather_factor + traffic_spike*10 + random.randint(-8,8)))
        punctuality_risk = max(0, 100 - congestion - random.randint(-5,5))
        suggested_staff_delta = 0
        if congestion > 65:
            suggested_staff_delta = 2
        elif congestion > 45:
            suggested_staff_delta = 1
        elif congestion < 30:
            suggested_staff_delta = -1
        payload = {
            'congestion': int(congestion),
            'punctuality_risk': int(punctuality_risk),
            'suggested_staff_delta': suggested_staff_delta,
            'message': f'AI Suggestion: adjust staff by {suggested_staff_delta} (congestion {int(congestion)})'
        }
        socketio.emit('ai_prediction', payload, namespace='/ai')
        base += random.randint(-3,3)
        base = max(15, min(85, base))
        socketio.sleep(6)


@app.route('/health')
def health():
    return jsonify({'status':'ok'})


@app.route('/predict')
def predict():
    congestion = random.randint(20,80)
    return jsonify({
        'congestion': congestion,
        'punctuality_risk': max(0,100-congestion)
    })


@socketio.on('connect', namespace='/ai')
def connect():
    emit('connected', {'msg':'connected to AEROVISTA AI stream'})


thread = None

@socketio.on('start_stream', namespace='/ai')
def start_stream(data):
    global thread
    if thread is None:
        thread = socketio.start_background_task(generate_prediction)
        emit('stream_started', {'msg':'AI stream started'})


if __name__ == '__main__':
    try:
        socketio.run(app, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        stop_event.set()
```

```text
frontend/package.json
```

```json
{
  "name": "aerovista-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "18.x",
    "react-dom": "18.x",
    "socket.io-client": "4.x",
    "three": "0.166.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}
```

```text
frontend/src/index.js
```

```javascript
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles.css'

createRoot(document.getElementById('root')).render(<App />)
```

```text
frontend/src/App.jsx
```

```javascript
import React, { useEffect, useRef, useState } from 'react'
import io from 'socket.io-client'
import * as THREE from 'three'

const SOCKET_URL = 'http://localhost:5000/ai'

export default function App(){
  const mountRef = useRef(null)
  const [connected, setConnected] = useState(false)
  const [aiData, setAiData] = useState({congestion:0, punctuality_risk:0, suggested_staff_delta:0, message:''})
  const [staffLevel, setStaffLevel] = useState(8)

  useEffect(()=>{
    const socket = io(SOCKET_URL, {path: '/socket.io/', transports: ['websocket'], autoConnect: true, withCredentials: false})
    socket.on('connect', ()=>{ setConnected(true); socket.emit('start_stream') })
    socket.on('ai_prediction', (data)=>{ setAiData(data) })
    socket.on('disconnect', ()=> setConnected(false))
    return ()=>{ socket.disconnect() }
  },[])

  useEffect(()=>{
    const current = mountRef.current
    const scene = new THREE.Scene()
    const camera = new THREE.PerspectiveCamera(75, current.clientWidth/current.clientHeight, 0.1, 1000)
    camera.position.z = 30
    const renderer = new THREE.WebGLRenderer({antialias:true, alpha:true})
    renderer.setSize(current.clientWidth, current.clientHeight)
    current.appendChild(renderer.domElement)

    const globeGeo = new THREE.SphereGeometry(10, 32, 32)
    const globeMat = new THREE.MeshBasicMaterial({wireframe:true, opacity:0.2, transparent:true})
    const globe = new THREE.Mesh(globeGeo, globeMat)
    scene.add(globe)

    const planeMeshes = []
    for(let i=0;i<12;i++){
      const geo = new THREE.SphereGeometry(0.35,8,8)
      const mat = new THREE.MeshBasicMaterial()
      const mesh = new THREE.Mesh(geo, mat)
      mesh.position.set((Math.random()-0.5)*18, (Math.random()-0.5)*10, (Math.random()-0.5)*6)
      planeMeshes.push({mesh, vx:(Math.random()-0.5)*0.6, vy:(Math.random()-0.5)*0.2})
      scene.add(mesh)
    }

    function animate(){
      requestAnimationFrame(animate)
      globe.rotation.y += 0.002
      planeMeshes.forEach(p=>{
        p.mesh.position.x += p.vx * 0.6
        p.mesh.position.y += p.vy * 0.3
        if(Math.abs(p.mesh.position.x) > 22) p.vx *= -1
        if(Math.abs(p.mesh.position.y) > 12) p.vy *= -1
      })
      renderer.render(scene, camera)
    }
    animate()

    return ()=>{
      renderer.dispose()
      current.removeChild(renderer.domElement)
    }
  },[])

  useEffect(()=>{
    if(aiData.suggested_staff_delta){
      setStaffLevel(prev => Math.max(3, Math.min(20, prev + aiData.suggested_staff_delta)))
    }
  }, [aiData])

  return (
    <div className="app">
      <div className="left">
        <div ref={mountRef} className="three-canvas" />
      </div>
      <div className="right">
        <h2>AEROVISTA — Demo</h2>
        <p>Status: {connected? 'Connected to AI stream' : 'Disconnected'}</p>
        <div className="panel">
          <h3>AI Prediction</h3>
          <p>Congestion: {aiData.congestion}</p>
          <p>Punctuality Risk: {aiData.punctuality_risk}</p>
          <p>Suggestion: {aiData.message}</p>
        </div>
        <div className="panel">
          <h3>Staffing Meter</h3>
          <p>Active Controllers: {staffLevel}</p>
          <div className="meter"><div className="meter-fill" style={{width: `${(staffLevel/20)*100}%`}}/></div>
        </div>
        <div className="panel">
          <h3>Quick Controls</h3>
          <button onClick={()=>setStaffLevel(s=>Math.max(3,s-1))}>Decrease Staff</button>
          <button onClick={()=>setStaffLevel(s=>Math.min(20,s+1))}>Increase Staff</button>
        </div>
      </div>
    </div>
  )
}
```

```text
frontend/src/styles.css
```

```css
body, html, #root { height:100%; margin:0; font-family: Inter, Arial, sans-serif }
.app { display:flex; height:100vh; color:#eaeaea; background: linear-gradient(180deg,#021024,#06213b); }
.left { flex:1; display:flex; align-items:center; justify-content:center }
.three-canvas { width:100%; height:100%; }
.right { width:380px; padding:18px; box-shadow: -8px 0 24px rgba(0,0,0,0.4); background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01)) }
.panel { background: rgba(255,255,255,0.03); padding:12px; margin-bottom:12px; border-radius:8px }
.meter { height:14px; background: rgba(255,255,255,0.06); border-radius:8px; overflow:hidden }
.meter-fill { height:100%; background: rgba(120,200,255,0.9); }
button{ margin-right:8px; padding:8px 10px; border-radius:6px; border:none; cursor:pointer }
```

---













